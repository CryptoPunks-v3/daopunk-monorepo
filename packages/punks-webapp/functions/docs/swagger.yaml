openapi: "3.0.3"
info:
  description: |
    The Punks serverless API can provide projected data that may be easier to use for non-blockchain-native clients.

    ## Function Versioning
    `v0-` prefixed functions are in development and may change before becoming finalized.
  version: "0.1.0"
  title: "Punks Serverless API"
  license:
    name: "CC0"
tags:
- name: "Address Data"
  description: "Functions that check status of Ethereum addresses"
- name: "Governance"
  description: "Functions for fetching governance data"
- name: "Punks"
  description: "Information about Punk tokens"
- name: "Cryptography"
  description: "Functions for verifying identity"
servers:
  - url: "https://nouns.wtf/.netlify/functions/"
    description: Production Deployment
paths:
  /v0-is-noun-owner:
    post:
      tags:
        - "Address Data"
      summary: "Check if an Ethereum address owns a Punk"
      operationId: "isPunkOwner"
      requestBody:
        description: The Ethereum address to check for Punk ownership
        content:
          "text/plain":
            schema:
              type: string
            example: "0x2536c09e5f5691498805884fa37811be3b2bddb4"
      responses:
        "200":
          description: "Does address own a Punk"
          content:
            application/json:
              schema:
                type: boolean
              example: true
  /v0-is-noun-delegate:
    post:
      tags:
        - "Address Data"
      summary: "Check if an Ethereum is delegated the voting power of a Punk"
      operationId: "isPunkDelegate"
      requestBody:
        description: The Ethereum address to check for Punk delegation
        content:
          "text/plain":
            schema:
              type: string
            example: "0x75ee6eb3d8dacf41ee2e5307090b197d3e1cca6e"
      responses:
        "200":
          description: "Is address delegated the voting power of a Punk"
          content:
            application/json:
              schema:
                type: boolean
              example: true
  /v0-noun-owners:
    get:
      summary: "Ethereum addresses that own Punks or are delegated voting power"
      tags:
        - "Address Data"
      operationId: "getPunkOwners"
      responses:
        "200":
          description: "Lite Punk information including owners and delegates"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LitePunk"
  /v0-noun-votes:
    get:
      summary: "All Punks and their votes"
      tags:
        - "Governance"
      operationId: "getPunkVotes"
      responses:
        "200":
          description: "All Punks and how the votes they cast in Punks governance proposals"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PunkWithVotes"
  /v0-proposal-votes:
    get:
      summary: "All governance proposals and their votes"
      tags:
        - "Governance"
      operationId: "getProposalVotes"
      responses:
        "200":
          description: "All governance proposals and an array of votes cast"
          content:
            application/json:
              schema:
                type: object
  /v0-noun-seeds:
    get:
      summary: "All Punks and their seeds"
      tags:
        - "Punks"
      operationId: "getPunkSeeds"
      responses:
        "200":
          description: "All Punks and their seeds"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PunkWithSeeds"
  /v0-verify-signature:
    post:
      summary: "Verify an ethereum signed message"
      tags:
        - "Cryptography"
      operationId: "getProposalVotes"
      parameters:
        - name: fetchParticipation
          in: "query"
          description: If set to true and the signature is valid, fetch to see if the signer owns or is delegated a Punk
          schema:
            type: boolean
          example: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifySignatureRequest"
            example:
              message: "I am 0x28f1F4ea77Af433c45366151F6f9906435d9DB19\n\nThis is me testing the Punks serverless API"
              signer: "0x28f1F4ea77Af433c45366151F6f9906435d9DB19"
              signature": "0xc82fd716033ae41efd155258622a6c7d0d42ce56d03d6ba0bef1091d54675c4872e99f5718dfe0cb1a1a8dfd8d62fd35dfa10445d40e001174756a7059dd80d81b"
      responses:
        "200":
          description: "All governance proposals and an array of votes cast"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifySignatureResponse"
components:
  schemas:
    NormalizedVote:
      type: object
      description: A Punks proposal vote
      properties:
        proposalId:
          type: integer
          format: uint256
          description: The ID of the Punks Governance proposal
        supportDetailed:
          type: integer
          format: uint256
          description: "The integer support value: against (0), for (1), or abstain (2)"
    Seed:
      type: object
      description: The attributes that make up a Punk's seed
      properties:
        head:
          type: integer
        body:
          type: integer
        background:
          type: integer
        accessory:
          type: integer
        glasses:
          type: integer
    NormalizedPunk:
      type: object
      description: A Punk record
      properties:
        id:
          type: integer
          format: uint256
        owner:
          type: string
        delegatedTo:
          type: string
          description: The address that the Punk's voting power is delegated to
        votes:
          type: array
          items:
            $ref: "#/components/schemas/NormalizedVote"
        seed:
          $ref: "#/components/schemas/Seed"
    ProposalVote:
      type: object
      description: How a Punk voted on a governance proposal
      properties:
        tokenId:
          type: integer
        owner:
          type: string
          description: The owner of the Punk
        delegatedTo:
          type: string
          description: The Ethereum address the Punk's voting power is delegated
        supportDetailed:
          type: integer
          description: "The integer support value: against (0), for (1), or abstain (2)"
    ProposalVotes:
      type: object
      description: A map of Punk governance proposal ID to an array of votes
    PunkWithSeeds:
      type: object
      description: A Punk and its seed attributes
      properties:
        id:
          type: integer
          format: uint256
        seed:
          type: object
          $ref: "#/components/schemas/Seed"
    PunkWithVotes:
      type: object
      description: How a Punk has voted on Punks governance proposals
      properties:
        id:
          type: integer
          format: uint256
        owner:
          type: string
          description: The owner of the Punk
        delegatedTo:
          type: string
          description: The Ethereum address a Punk's voting power has been delegated to
        votes:
          type: array
          items:
            $ref: "#/components/schemas/NormalizedVote"
    LitePunk:
      type: object
      properties:
        id:
          type: integer
          format: uint256
        owner:
          type: string
          description: The owner of the Punk
        delegatedTo:
          type: string
          description: The Ethereum address a Punk's voting power has been delegated to
    VerifySignatureRequest:
      type: object
      required:
        - "message"
        - "signature"
        - "signer"
      properties:
        message:
          type: string
          description: The original signed message
        signature:
          type: string
          description: Signature submitted for verification
        signer:
          type: string
          description: The address attesting to have signed the message
    VerifySignatureResponse:
      type: object
      required:
        - "message"
        - "signature"
        - "providedSignature"
        - "recoveredAddress"
        - "validSignature"
      properties:
        message:
          type: string
          description: The original signed message
        signature:
          type: string
          description: Signature submitted for verification
        providedSigner:
          type: string
          description: The signer address provided in the request
        recoveredAddress:
          type: string
          description: The address recovered from the signature
        validSignature:
          type: boolean
          description: If the supplied signature is valid
        isPunkOwner:
          type: boolean
          description: If the signature is valid and the address owns a Punk
        isPunkDelegate:
          type: boolean
          description: If the signature is valid and the address is delegated a Punk